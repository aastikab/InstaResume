const { OpenAI } = require('openai');
const { Document, Packer, Paragraph, TextRun } = require("docx");
const fs = require("fs");
const path = require("path");

// Set up OpenAI configuration
require("dotenv").config();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const Resume = require('../models/Resume');

// const createResume = async (req, res) => {
//   try {
//     const resume = await Resume.create({
//       ...req.body,
//       user: req.user._id
//     });
//     res.status(201).json(resume);
//   } catch (error) {
//     console.error('Create resume error:', error);
//     res.status(500).json({ message: 'Error creating resume' });
//   }
// };

// const createResume = async (req, res) => {
//   try {
//     console.log('I am in the backend');
//     res.status(200).json({ message: 'Resume created successfully' });
//   } catch (error) {
//     console.error('Create resume error:', error);
//     res.status(500).json({ message: 'Error creating resume' });
//   }
// };

const createResume = async (req, res) => {
  try {

    const { personalInfo, experience, education, skills } = req.body;

    const prompt = `
      Generate a professional resume based on the following details:

      Personal Information:
      Name: ${personalInfo.name}
      Email: ${personalInfo.email}
      Phone: ${personalInfo.phone}
      Address: ${personalInfo.address}
      
      Summary: Make this summary interesting and creative. ${personalInfo.summary}

      Experience: The below experience contains name of company and year I have worked. Please make separate sections for different job experience.
      ${experience}

      Education: The below education contains name of college and attendance year. Please make separate sections for different level of education.
      ${education}

      Skills:
      ${skills}

     Format the following resume content professionally.

     Re-write and format it such that it is present in a clear and concise way.
    
      Ensure that each section is clearly labeled and properly formatted with consistent spacing and alignment.
      Separate each section with a dark horizontal line.
      
    `;

    // Call OpenAI API to generate the resume
    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // Or use "gpt-3.5-turbo"
      messages: [
        { role: "system", content: "You are a professional resume writer." },
        { role: "user", content: prompt },
      ],
      max_tokens: 1000, // Adjust token limit as needed
      temperature: 0.7,
    });

    // console.log("API Response:", response);

    const generatedResume =
      response.choices[0].message?.content?.trim() || "No response content";
    
    // console.log(generatedResumeS);
    // Extract the generated resume text
    
    console.log(generatedResume);
    console.log("In backend");
    // const sections = generatedResume.split("---").map((section) => section.trim());
    // console.log(sections);

    const doc = new Document({
      creator: "InstaResume",
      title: "Generated Resume",
      description: "A resume generated by InstaResume app.",
      sections: [
        {
          properties: {}, // Optional, can specify section properties here
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: "Generated Resume",
                  bold: true,
                  size: 28,
                }),
              ],
            }),
            new Paragraph({
              text: generatedResume,
            }),
          ],
        },
      ],
    });

    // Save the document to a buffer
    const fileName = personalInfo.name + "-GeneratedResume.docx";
    const filePath = path.join(__dirname, `../../${fileName}`);

    // Write the document to the file system
    const buffer = await Packer.toBuffer(doc);

  

    fs.writeFileSync(filePath, buffer);
    
    

    // Optional: Delete the file after sending (if not needed for storage)
    if (fs.existsSync(filePath)) {
     console.log("Created"); // Delete the file
    } else {
      console.error("File does not exist for deletion:", filePath);
    }
   
    res.status(200).json({ message: "Resume created successfully" });

  } catch (error) {
    console.error('Create resume error:', error);
    res.status(500).json({ message: 'Error creating resume' });
  }
};

const getResumes = async (req, res) => {
  try {
    console.log('Fetching resumes for user:', req.user._id);
    const resumes = await Resume.find({ user: req.user._id })
      .sort({ createdAt: -1 });
    
    console.log('Found resumes:', resumes);
    res.json(resumes);
  } catch (error) {
    console.error('Get resumes error:', error);
    res.status(500).json({ message: 'Error fetching resumes' });
  }
};

const getResumeById = async (req, res) => {
  try {
    const resume = await Resume.findOne({
      _id: req.params.id,
      user: req.user._id
    });
    
    if (!resume) {
      return res.status(404).json({ message: 'Resume not found' });
    }
    
    res.json(resume);
  } catch (error) {
    console.error('Get resume error:', error);
    res.status(500).json({ message: 'Error fetching resume' });
  }
};

const updateResume = async (req, res) => {
  try {
    const resume = await Resume.findOneAndUpdate(
      { _id: req.params.id, user: req.user._id },
      req.body,
      { new: true, runValidators: true }
    );

    if (!resume) {
      return res.status(404).json({ message: 'Resume not found' });
    }

    res.json(resume);
  } catch (error) {
    console.error('Update resume error:', error);
    res.status(500).json({ message: 'Error updating resume' });
  }
};

const deleteResume = async (req, res) => {
  try {
    const resume = await Resume.findOneAndDelete({
      _id: req.params.id,
      user: req.user._id
    });

    if (!resume) {
      return res.status(404).json({ message: 'Resume not found' });
    }

    res.json({ message: 'Resume deleted successfully' });
  } catch (error) {
    console.error('Delete resume error:', error);
    res.status(500).json({ message: 'Error deleting resume' });
  }
};

module.exports = {
  createResume,
  getResumes,
  getResumeById,
  updateResume,
  deleteResume
}; 